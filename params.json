{"name":"Georchestra","tagline":"This is the main geOrchestra repository","body":"geOrchestra\r\n===========\r\n\r\ngeOrchestra is a complete **Spatial Data Infrastructure** solution.\r\n\r\nIt features a **metadata catalog** (GeoNetwork 2.9-pre), an **OGC server** (GeoServer 2.3.0), an **advanced viewer**, an **extractor** and **many more** (security and auth system based on proxy/CAS/LDAP, analytics, admin UIs, ...)\r\n\r\nMore information in the modules README:\r\n * [viewer](https://github.com/georchestra/georchestra/blob/master/mapfishapp/README.md) (aka mapfishapp)\r\n * [extractor](https://github.com/georchestra/georchestra/blob/master/extractorapp/README.md) (aka extractorapp)\r\n * [simple catalog](https://github.com/georchestra/georchestra/blob/master/catalogapp/README.md) (aka catalogapp)\r\n * [analytics](https://github.com/georchestra/georchestra/blob/master/analytics/README.md)\r\n * [downloadform](https://github.com/georchestra/georchestra/blob/master/downloadform/README.md)\r\n * [ogc-server-statistics](https://github.com/georchestra/georchestra/blob/master/ogc-server-statistics/README.md)\r\n * [static](https://github.com/georchestra/georchestra/blob/master/static/README.md)\r\n\r\n\r\nHow to build ?\r\n==============\r\n\r\nFirst, install the required packages: \r\n\r\n    sudo apt-get install ant ant-optional openjdk-7-jdk\r\n\r\nNotes: \r\n * openjdk-6-jdk works too \r\n * GeoServer is known to perform better with Oracle JDK\r\n\r\nThen:\r\n\r\n    git clone --recursive https://github.com/georchestra/georchestra.git\r\n    cd georchestra\r\n    ./mvn -Dmaven.test.skip=true -Ptemplate install\r\n\r\nHow to customize ?\r\n==================\r\n \r\nCopy the \"template\" config directory (or fork the [georchestra/template](https://github.com/georchestra/template) repository) and edit \"yourown\" to match your needs:\r\n\r\n    PROFILE=yourown\r\n    cp -r config/configurations/template config/configurations/${PROFILE}\r\n       (edit files in config/configuration/yourown)\r\n    ./mvn -Dmaven.test.skip=true -Dserver=${PROFILE} install\r\n\r\n[Read more](https://github.com/georchestra/georchestra/blob/master/config/README.md) about the configuration process\r\n\r\nHow to deploy ?\r\n===============\r\n\r\nCollect WAR files in a dedicated directory and rename them:\r\n\r\n    PROFILE=yourown\r\n    mkdir /tmp/georchestra_deploy_tmp\r\n    cd /tmp/georchestra_deploy_tmp\r\n    cp `find ~/.m2/repository/ -name *-13.02-${PROFILE}.war` ./\r\n    \r\n    mv security-proxy-13.02-${PROFILE}.war ROOT.war\r\n    mv analytics-13.02-${PROFILE}.war analytics-private.war\r\n    mv cas-server-webapp-13.02-${PROFILE}.war cas.war\r\n    mv catalogapp-13.02-${PROFILE}.war catalogapp-private.war\r\n    mv downloadform-13.02-${PROFILE}.war downloadform-private.war\r\n    mv extractorapp-13.02-${PROFILE}.war extractorapp-private.war\r\n    mv geonetwork-main-13.02-${PROFILE}.war geonetwork-private.war\r\n    mv geoserver-webapp-13.02-${PROFILE}.war geoserver-private.war\r\n    mv mapfishapp-13.02-${PROFILE}.war mapfishapp-private.war\r\n    mv static-13.02-${PROFILE}.war static.war\r\n\r\nCopy WAR files in Tomcat webapps dir:\r\n\r\n    sudo /etc/init.d/tomcat stop\r\n    cp -f /tmp/georchestra_deploy_tmp/* /srv/tomcat/webapps\r\n    sudo /etc/init.d/tomcat start\r\n\r\nThis is the basic idea, but one can use more advanced deploy scripts. An example is provided \r\n[here](https://github.com/georchestra/georchestra/blob/master/server-deploy/linux_deploy_scripts/Readme.md).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}